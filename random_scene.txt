hittable_list random_scene() {
    hittable_list world;

    auto ground_material = make_shared<lambertian>(color(0.5, 0.5, 0.5));
    world.add(make_shared<sphere>(point3(0, -1000, 0), 1000, ground_material));

    auto sphere_material = make_shared<metal>(color(0.8, 0.8, 0.8), 0.0);
    world.add(make_shared<sphere>(point3(0, 1, 0), 1.0, sphere_material));

    return world;
}

hittable_list random_scene() {
    hittable_list world;

    auto ground_material = make_shared<lambertian>(color(0.2, 0.8, 0.2));
    world.add(make_shared<sphere>(point3(0, -1000, 0), 1000, ground_material));

    auto sphere_material1 = make_shared<lambertian>(color(0.8, 0.2, 0.2));
    world.add(make_shared<sphere>(point3(0, 0.5, -1), 0.5, sphere_material1));

    auto sphere_material2 = make_shared<metal>(color(0.8, 0.8, 0.8), 0.0);
    world.add(make_shared<sphere>(point3(0, 1, -3), 1.0, sphere_material2));

    return world;
}

hittable_list random_scene() {
    hittable_list world;

    auto ground_material = make_shared<lambertian>(color(0.2, 0.8, 0.2));
    world.add(make_shared<sphere>(point3(0, -1000, 0), 1000, ground_material));

    auto sphere_material1 = make_shared<lambertian>(color(0.8, 0.2, 0.2));
    world.add(make_shared<sphere>(point3(-1.0, 0.5, -3), 0.5, sphere_material1));

    auto sphere_material2 = make_shared<lambertian>(color(0.2, 0.2, 0.8));
    world.add(make_shared<sphere>(point3(0, 0.5, -2), 0.5, sphere_material2));

    auto sphere_material3 = make_shared<lambertian>(color(0.2, 0.8, 0.2));
    world.add(make_shared<sphere>(point3(1.0, 0.5, -1), 0.5, sphere_material3));

    return world;
}

hittable_list random_scene() {
    hittable_list world;

    auto ground_material = make_shared<lambertian>(color(0.2, 0.8, 0.2));
    world.add(make_shared<sphere>(point3(0, -1000, 0), 1000, ground_material));

    auto sphere_material1 = make_shared<lambertian>(color(0.8, 0.2, 0.2));
    world.add(make_shared<sphere>(point3(-1, 0.5, -3), 0.5, sphere_material1));

    auto sphere_material2 = make_shared<metal>(color(0.8, 0.8, 0.8), 0.0);
    world.add(make_shared<sphere>(point3(1, 0.5, -3), 0.5, sphere_material2));

    auto sphere_material3 = make_shared<dielectric>(1.5);
    world.add(make_shared<sphere>(point3(-1, 0.5, -1), 0.5, sphere_material3));

    auto sphere_material4 = make_shared<dielectric>(1.5);
    world.add(make_shared<sphere>(point3(1, 0.5, -1), 0.5, sphere_material4));

    return world;
}

hittable_list random_scene() {
     hittable_list world;

    auto ground_material = make_shared<lambertian>(color(0.2, 0.8, 0.2));
    world.add(make_shared<sphere>(point3(0, -1000, 0), 1000, ground_material));

    auto sphere_material1 = make_shared<lambertian>(color(0.8, 0.2, 0.2));
    world.add(make_shared<sphere>(point3(0, 0.5, -3), 0.5, sphere_material1));

    auto sphere_material2 = make_shared<lambertian>(color(0.2, 0.2, 0.8));
    world.add(make_shared<sphere>(point3(-0.866, 0.5, -2.5), 0.5, sphere_material2));

    auto sphere_material3 = make_shared<lambertian>(color(0.8, 0.8, 0.2));
    world.add(make_shared<sphere>(point3(-0.866, 0.5, -3.5), 0.5, sphere_material3));

    auto sphere_material4 = make_shared<lambertian>(color(0.2, 0.8, 0.8));
    world.add(make_shared<sphere>(point3(0.866, 0.5, -2.5), 0.5, sphere_material4));

    auto sphere_material5 = make_shared<lambertian>(color(0.8, 0.2, 0.8));
    world.add(make_shared<sphere>(point3(0.866, 0.5, -3.5), 0.5, sphere_material5));

    return world;
}

hittable_list random_scene() {
hittable_list world;

    auto ground_material = make_shared<lambertian>(color(0.2, 0.8, 0.2));
    world.add(make_shared<sphere>(point3(0, -1000, 0), 1000, ground_material));

    auto sphere_material1 = make_shared<lambertian>(color(0.8, 0.2, 0.2));
    world.add(make_shared<sphere>(point3(-1, 0.5, -3), 0.5, sphere_material1));

    auto sphere_material2 = make_shared<lambertian>(color(0.2, 0.2, 0.8));
    world.add(make_shared<sphere>(point3(1, 0.5, -3), 0.5, sphere_material2));

    auto sphere_material3 = make_shared<lambertian>(color(0.2, 0.8, 0.2));
    world.add(make_shared<sphere>(point3(-1, 0.5, -1), 0.5, sphere_material3));

    auto sphere_material4 = make_shared<lambertian>(color(0.8, 0.8, 0.2));
    world.add(make_shared<sphere>(point3(1, 0.5, -1), 0.5, sphere_material4));

    // Duplicate the spheres above to create floating spheres
    auto sphere_material5 = make_shared<lambertian>(color(0.8, 0.2, 0.2));
    world.add(make_shared<sphere>(point3(-1, 1.5, -3), 0.5, sphere_material5));

    auto sphere_material6 = make_shared<lambertian>(color(0.2, 0.2, 0.8));
    world.add(make_shared<sphere>(point3(1, 1.5, -3), 0.5, sphere_material6));

    auto sphere_material7 = make_shared<lambertian>(color(0.2, 0.8, 0.2));
    world.add(make_shared<sphere>(point3(-1, 1.5, -1), 0.5, sphere_material7));

    auto sphere_material8 = make_shared<lambertian>(color(0.8, 0.8, 0.2));
    world.add(make_shared<sphere>(point3(1, 1.5, -1), 0.5, sphere_material8));

    return world;
}

hittable_list random_scene() {
    hittable_list world;

    auto ground_material = make_shared<lambertian>(color(0.2, 0.8, 0.2));
    world.add(make_shared<sphere>(point3(0, -1000, 0), 1000, ground_material));

    int numSpheres = 5;
    double radius = 0.5;
    double spacing = 1.5;

    for (int i = 0; i < numSpheres; ++i) {
        for (int j = 0; j < numSpheres; ++j) {
            double x = (i - (numSpheres - 1) / 2.0) * spacing;
            double z = (j - (numSpheres - 1) / 2.0) * spacing;
            double y = radius;

            point3 center(x, y, -z);

            auto sphere_material = make_shared<lambertian>(color(
                static_cast<double>(i) / (numSpheres - 1),
                static_cast<double>(j) / (numSpheres - 1),
                0.5
            ));

            world.add(make_shared<sphere>(center, radius, sphere_material));
        }
    }

    return world;
}

 hittable_list world;

    auto ground_material = make_shared<lambertian>(color(0.2, 0.8, 0.2));
    world.add(make_shared<sphere>(point3(0, -1000, 0), 1000, ground_material));

    int numSpheres = 10;
    double radius = 0.2;
    double spacing = 1.0;

    for (int i = 0; i < numSpheres; ++i) {
        for (int j = 0; j < numSpheres; ++j) {
            double x = (i - numSpheres / 2.0) * spacing;
            double z = (j - numSpheres / 2.0) * spacing;
            double y = radius;

            point3 center(x, y, -z);

            if ((i + j) % 2 == 0) {
                auto sphere_material = make_shared<metal>(color(0.8, 0.8, 0.8), 0.2);
                world.add(make_shared<sphere>(center, radius, sphere_material));
            } else {
                auto sphere_material = make_shared<lambertian>(color(0.8, 0.2, 0.2));
                world.add(make_shared<sphere>(center, radius, sphere_material));
            }
        }
    }

    return world;